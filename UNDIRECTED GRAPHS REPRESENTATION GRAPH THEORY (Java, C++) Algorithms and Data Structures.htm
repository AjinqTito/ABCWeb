<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/ xhtml1/DTD/xhtml1-strict.dtd">
<html><head>
<title>UNDIRECTED GRAPHS REPRESENTATION :: GRAPH THEORY (Java, C++) |  Algorithms and Data Structures</title>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Language" content="en-us">
<meta name="keywords" content="">
<meta name="description" content="Undirected graphs representation. Adjacency matrix and adjacency list, their advantages and disadvantages. Sparse and dense graphs. Java and C++ implementations.">
<link rel="stylesheet" href="UNDIRECTED%20GRAPHS%20REPRESENTATION%20GRAPH%20THEORY%20(Java,%20C++)%20Algorithms%20and%20Data%20Structures_files/style2.css" type="text/css">
   
<script type="text/javascript" src="UNDIRECTED%20GRAPHS%20REPRESENTATION%20GRAPH%20THEORY%20(Java,%20C++)%20Algorithms%20and%20Data%20Structures_files/prototype.js"></script>
  <script>
      function sendRequest() {
        new Ajax.Request("/sendmailx.php", 
          { 
          method: 'post', 
          postBody: 'message='+ $F('message')+'&visitor='+ $F('visitor')+'&visitormail='+ $F('visitormail')+'&ip=41.75.187.205&httpref=/Data_structures/Graph/Internal_representation&httpagent=Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:94.0) Gecko/20100101 Firefox/94.0',
          onComplete: showResponse 
          });
        }
		
		function sendDonate() {
        new Ajax.Request("/donatex.php", 
          { 
          method: 'post', 
          postBody: 'message=donation_click'+'&ip=41.75.187.205&httpref=/Data_structures/Graph/Internal_representation&httpagent=Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:94.0) Gecko/20100101 Firefox/94.0',
          onComplete: showDonate
          });
        }
      function showResponse(req){
        $('showx').innerHTML= req.responseText;
        $('message').value = '';
        $('visitor').value = '';
        $('visitormail').value = '';
      }	 
	  
	  function showDonate(req){
	  }
	  
   </script>
    <style type="text/css">
<!--
.table1 {
  
  margin: 0px 0 1em 0;
  caption-side: top;
  background-color:#F5F5F5;
}
.td1 {
  border: 1px solid #cccccc;
}
.td2 {
  border: 1px none #cccccc;
}
.style_sup_new {
  color: #993300;
  font-weight: bold;
}
-->
    </style>
</head>
<body>
<div class="width">
<div class="padding">
<div class="banner">
  <table height="100%" cellspacing="0" cellpadding="0" border="0">
    <tbody><tr>
      <td valign="bottom" nowrap="nowrap" height="50" align="left"><a href="https://www.algolist.net/" class="title1" style="color: #7F0055">Algorithms and Data Structures</a></td>
    </tr>
    <tr>
      <td valign="top" height="51" align="left"><span class="title2" style="color: #3F7F5F">with implementations in Java and C++</span></td>
    </tr>
  </tbody></table>
</div>
</div>
</div>
<table style="background-color:#F5F5F5; margin-left:auto; margin-right:auto;"><tbody><tr><td>
<div class="width"><div class="padding">
  <div class="leftstrip">
      <div class="leftmenu">
          <a class="oolink" href="https://www.algolist.net/Data_structures/">Data structures</a><br>
          <a class="oolink" href="https://www.algolist.net/Algorithms/">Algorithms</a><br>
          <a class="oolink" href="https://www.algolist.net/Cpp/">C++</a><br>
          <a class="oolink" href="https://www.algolist.net/Books/">Books</a><br>
          <a class="oolink" href="http://forum.algolist.net/">Forum</a><br>            
          <a class="oolink" href="https://www.algolist.net/Feedback">Feedback</a><br>  
    </div>  
    
         
        <div class="leftpp">
       <div style="padding-top:15px;"><span style="text-align:center; font-size:12pt; font-family:Verdana; color: #006CAB; font-weight:bold; line-height:140%">
   
	<span style="font-size:14pt; color: #c95069">Support us</span><br><br><br>
   
    <span>to write<br>more tutorials</span><br><br><br><br>
   
	<span>to create new<br>visualizers</span><br><br><br> <br>
    
    to keep sharing<br>free knowledge <br>for you<br>
    
    <div style="padding-top:60px;">
    
    <form action="https://www.paypal.com/cgi-bin/webscr" method="post">
<input type="hidden" name="cmd" value="_s-xclick">
<input type="hidden" name="hosted_button_id" value="WJ7YPA5XHR5N8">
<input type="image" onclick="sendDonate()" src="UNDIRECTED%20GRAPHS%20REPRESENTATION%20GRAPH%20THEORY%20(Java,%20C++)%20Algorithms%20and%20Data%20Structures_files/btn_donate_LG.webp" name="submit" alt="PayPal - The safer, easier way to pay online!" border="0">
<img alt="" src="UNDIRECTED%20GRAPHS%20REPRESENTATION%20GRAPH%20THEORY%20(Java,%20C++)%20Algorithms%20and%20Data%20Structures_files/pixel.gif" width="1" height="1" border="0">
<img alt="" style="margin-top:5px;" src="UNDIRECTED%20GRAPHS%20REPRESENTATION%20GRAPH%20THEORY%20(Java,%20C++)%20Algorithms%20and%20Data%20Structures_files/pp.png" border="0">
</form>
	<br><br><span style="font-size:10pt; color: #3F7F5F;">every dollar helps</span>	
	</div>
   
   </span></div>                            
        </div> 
        
        <div class="lefttop3"><strong>TOP3&nbsp;Articles</strong><br><a class="oolink" href="https://www.algolist.net/Algorithms/Sorting/Quicksort">Quicksort</a><br><a class="oolink" href="https://www.algolist.net/Algorithms/Graph/Undirected/Depth-first_search">Depth-first search</a><br><a class="oolink" href="https://www.algolist.net/Data_structures/Binary_search_tree">Binary search tree</a><br></div>               
    </div>
  <!--<div id="searchdiv">-->
      <!--<form action="http://www.algolist.net/search.php" id="cse-search-box">-->
        <!--<input type="hidden" name="cx" value="partner-pub-3923249955015497:4t0ah4wja3n" />-->
        <!--<input type="hidden" name="cof" value="FORID:10" />-->
        <!--<input type="hidden" name="ie" value="ISO-8859-1" />-->
        <!--<input type="text" name="q" id="query_inp" size="114"/>-->
        <!--<input type="submit" id="search_btn" name="sa" value="Search"/>-->
      <!--</form>-->
  <!--</div>-->
<script type="text/javascript"></script>
  <script>  
  
(function() { 
if (navigator.appName == "Netscape") {
  var ua = navigator.userAgent;
    var re = new RegExp("Chrome");
    if (re.exec(ua) == null) {
    document.getElementById('searchdiv').style.cssText = 'margin-bottom:2px;';
    document.getElementById('query_inp').size = 115;
  }
  else {
    document.getElementById('searchdiv').style.cssText = 'margin-bottom:-14px;';
    document.getElementById('query_inp').size = 114;
  }
  }
else if (navigator.appName == "Microsoft Internet Explorer") {
    var ua = navigator.userAgent;
    var re = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})");
    if (re.exec(ua) != null)
      rv = parseFloat(RegExp.$1)
  if (rv != 8)
    document.getElementById('searchdiv').style.cssText = 'margin-bottom:-18px;';  
  if (rv == 8) {    
    document.getElementById('searchdiv').style.cssText = 'margin-bottom:2px;';    
    document.getElementById('query_inp').size = 114;
  }
}
else if (navigator.appName == "Opera") {
  document.getElementById('searchdiv').style.cssText = 'margin-bottom:-14px;';  
  document.getElementById('query_inp').size = 117;
}
  
var f = document.getElementById('cse-search-box'); if (!f) { f = document.getElementById('searchbox_demo'); } if (f && f.q) { var q = f.q; var n = navigator; var l = location; if (n.platform == 'Win32') { q.style.cssText = 'border: 1px solid #ddd; padding: 3px; padding-right:1px;'; } var b = function() { if (q.value == '') { q.style.background = '#FFFFFF url(http:\x2F\x2Fwww.google.com\x2Fcoop\x2Fintl\x2Fen\x2Fimages\x2Fgoogle_custom_search_watermark.gif) left no-repeat'; } }; var f = function() { q.style.background = '#ffffff'; }; q.onfocus = f; q.onblur = b; if (!/[&?]q=[^&]/.test(l.search)) { b(); } } })();   
   </script>
  <div class="content">
      <div class="inside">
      
          <div class="ga">
              Explore the English language on a new scale using <a href="https://linguazza.com/">AI-powered English language navigator</a>.
            </div>
        <style type="text/css">
<!--
p.MsoNormal {
margin:0cm;
margin-bottom:.0001pt;
font-size:12.0pt;
font-family:"Times New Roman";
}
.style1 {font-family: Arial, Helvetica, sans-serif}
.style2 {font-family: "Courier New", Courier, monospace}
-->
</style>

<h1>Undirected graphs representation</h1>
<p>There are several possible ways to represent a graph inside the computer. We will discuss two of them: <strong>adjacency matrix</strong> and <strong>adjacency list</strong>.</p>
<h2>Adjacency matrix</h2>
<p>Each cell a<sub>ij</sub> of an adjacency matrix contains <strong>0</strong>, if there is an edge between i-th and j-th vertices, and <strong>1</strong> otherwise. Before discussing the advantages and disadvantages of this kind of representation, let us see an example.</p>
<table style="border: 1px #000000 none" width="100%">
  <tbody><tr>
    <td width="50%" align="center"><img src="UNDIRECTED%20GRAPHS%20REPRESENTATION%20GRAPH%20THEORY%20(Java,%20C++)%20Algorithms%20and%20Data%20Structures_files/graph-ir-1.png" alt="Graph sample"></td>
    <td width="50%" align="center"><img src="UNDIRECTED%20GRAPHS%20REPRESENTATION%20GRAPH%20THEORY%20(Java,%20C++)%20Algorithms%20and%20Data%20Structures_files/graph-ir-2.png" alt="Adjacency matrix for the graph"></td>
  </tr>
  <tr>
    <td align="center"><span class="style1">Graph</span></td>
    <td align="center"><span class="style1">Adjacency matrix</span></td>
  </tr>
</tbody></table>
<br><br>
<table style="border: 1px #000000 none" width="100%">
  <tbody><tr>
    <td width="50%" align="center"><img src="UNDIRECTED%20GRAPHS%20REPRESENTATION%20GRAPH%20THEORY%20(Java,%20C++)%20Algorithms%20and%20Data%20Structures_files/graph-ir-3.png" alt="Edge (2, 5)"></td>
    <td width="50%" align="center"><img src="UNDIRECTED%20GRAPHS%20REPRESENTATION%20GRAPH%20THEORY%20(Java,%20C++)%20Algorithms%20and%20Data%20Structures_files/graph-ir-4.png" alt="Cells for edge (2, 5)"></td>
  </tr>
  <tr>
    <td align="center"><span class="style1">Edge (2, 5)</span></td>
    <td align="center"><span class="style1">Cells for the edge (2, 5)</span></td>
  </tr>
</tbody></table>
<table style="border: 1px #000000 none" width="100%">
  <tbody><tr>
    <td width="50%" align="center"><img src="UNDIRECTED%20GRAPHS%20REPRESENTATION%20GRAPH%20THEORY%20(Java,%20C++)%20Algorithms%20and%20Data%20Structures_files/graph-ir-5.png" alt="Graph sample"></td>
    <td width="50%" align="center"><img src="UNDIRECTED%20GRAPHS%20REPRESENTATION%20GRAPH%20THEORY%20(Java,%20C++)%20Algorithms%20and%20Data%20Structures_files/graph-ir-6.png" alt="Adjacency matrix for the graph"></td>
  </tr>
  <tr>
    <td align="center"><span class="style1">Edge (1, 3)</span></td>
    <td align="center"><span class="style1">Cells for the edge (1, 3)</span></td>
  </tr>
</tbody></table>
<p>The graph presented by example is undirected. It means that its 
adjacency matrix is symmetric. Indeed, in undirected graph, if there is 
an edge (2, 5) then there is also an edge (5, 2). This is also the 
reason, why there are two cells for every edge in the sample. <span style="font-family:'Times New Roman'; font-size:12.0pt; ">Loops, if they are  allowed in a graph, correspond to the diagonal elements of an adjacency matrix. </span></p>
<p><strong>Advantages. </strong>Adjacency matrix is very convenient to 
work with. Add (remove) an edge can be done in O(1) time, the same time 
is required to check, if there is an edge between two vertices. Also it 
is very simple to program and in all our graph tutorials we are going to
 work with this kind of representation.
</p>
<p>
<strong>Disadvantages. </strong></p>
<ul>
  <li>
    <p>Adjacency matrix consumes huge amount of memory for storing big graphs. All graphs can be divided into two categories, <em>sparse</em> and <em>dense</em> graphs. Sparse ones contain not much edges (number of edges is much less, that square of number of vertices, <span class="style2">|E| &lt;&lt; |V|<sup>2</sup></span>).
 On the other hand, dense graphs contain number of edges comparable with
 square of number of vertices. Adjacency matrix is optimal for dense 
graphs, but for sparse ones it is superfluous.</p>
  </li>
  <li>
    <p>Next drawback of the adjacency matrix is that in many algorithms 
you need to know the edges, adjacent to the current vertex. To draw out 
such an information from the adjacency matrix you have to scan over the 
corresponding row, which results in <span class="style2">O(|V|)</span> complexity. For the algorithms like DFS or based on it, use of the adjacency matrix results in overall complexity of <span class="style2">O(|V|<sup>2</sup>)</span>, while it can be reduced to <span class="style2">O(|V| + |E|),</span> when using adjacency list.</p>
  </li>
  <li>
    <p>The last disadvantage, we want to draw you attention to, is that 
adjacency matrix requires huge efforts for adding/removing a vertex. In 
case, a graph is used for analysis only, it is not necessary, but if you
 want to construct fully dynamic <span style="font-family:'Times New Roman'; font-size:12.0pt; ">structure</span>, using of adjacency matrix make it quite slow for big graphs.</p>
  </li>
</ul>
To sum up, adjacency matrix is a good solution for dense graphs, which implies having constant number of vertices.
<h2>Adjacency list</h2>
<p>This kind of the graph representation is one of the alternatives to 
adjacency matrix. It requires less amount of memory and, in particular <span style="font-family:'Times New Roman'; font-size:12.0pt; ">situations </span>
 even can outperform adjacency matrix. For every vertex adjacency list 
stores a list of vertices, which are adjacent to current one. Let us see
 an example.</p>
<table style="border: 1px #000000 none" width="100%">
  <tbody><tr>
    <td width="50%" align="center"><img src="UNDIRECTED%20GRAPHS%20REPRESENTATION%20GRAPH%20THEORY%20(Java,%20C++)%20Algorithms%20and%20Data%20Structures_files/graph-ir-1.png" alt="Graph sample"></td>
    <td width="50%" align="center"><img src="UNDIRECTED%20GRAPHS%20REPRESENTATION%20GRAPH%20THEORY%20(Java,%20C++)%20Algorithms%20and%20Data%20Structures_files/graph-ir-7.png" alt="Adjacency list for the graph"></td>
  </tr>
  <tr>
    <td align="center"><span class="style1">Graph</span></td>
    <td align="center"><span class="style1">Adjacency list</span></td>
  </tr>
</tbody></table>
<br><br>
<table style="border: 1px #000000 none" width="100%">
  <tbody><tr>
    <td width="50%" align="center"><img src="UNDIRECTED%20GRAPHS%20REPRESENTATION%20GRAPH%20THEORY%20(Java,%20C++)%20Algorithms%20and%20Data%20Structures_files/graph-ir-8.png" alt="Graph sample"></td>
    <td width="50%" align="center"><img src="UNDIRECTED%20GRAPHS%20REPRESENTATION%20GRAPH%20THEORY%20(Java,%20C++)%20Algorithms%20and%20Data%20Structures_files/graph-ir-9.png" alt="Adjacency list for the graph"></td>
  </tr>
  <tr>
    <td align="center"><span class="style1">Vertices, adjacent to {2}</span></td>
    <td align="center"><span class="style1">Row in the adjacency list</span></td>
  </tr>
</tbody></table>
<p><strong>Advantages. </strong>Adjacent list allows us to store graph 
in more compact form, than adjacency matrix, but the difference 
decreasing as a graph becomes denser. Next advantage is that adjacent 
list allows to get the list of <span style="font-family:'Times New Roman'; font-size:12.0pt; ">adjacent </span> vertices in <span class="style2">O(1)</span> time, which is a big advantage for some algorithms.</p>
<p>
<strong>Disadvantages. </strong></p>
<ul>
<li>Adding/removing an edge to/from adjacent list is not so easy as for adjacency matrix. It requires, on the average, <span class="style2">O(|E| / |V|)</span> time, which may result in cubical complexity for dense graphs to add all edges.
</li><li>Check, if there is an edge between two vertices can be done in <span class="style2">O(|E| / |V|)</span> when list of adjacent vertices is unordered or<span class="style2"> </span><span class="style2">O(log<sub>2</sub>(|E| / |V|))</span> when it is  sorted. This operation stays quite cheap.
</li><li>Adjacent list doesn't allow us to make an efficient 
implementation, if dynamically change of vertices number is required. 
Adding new vertex can be done in <span class="style2">O(V)</span>, but removal results in <span class="style2">O(E)</span> complexity.
</li></ul>
<p>To sum up, adjacency list is a good solution for sparse graphs and 
lets us changing number of vertices more efficiently, than if using an 
adjacent matrix. But still there are better solutions to store fully 
dynamic graphs.</p>
<h2>Code snippets</h2>
<p><span style="color:#000000;">For reasons of</span> simplicity, we 
show here code snippets only for adjacency matrix, which is used for our
 entire graph tutorials. Notice, that it is an implementation for 
undirected graphs.</p>
<h3>Java</h3>
<p class="MsoNormal" style="text-autospace:none;"><strong><span style="font-family:'Courier New'; font-size:10.0pt; color:#7F0055; ">public</span></strong><span style="font-family:'Courier New'; font-size:10.0pt; color:black; "> </span><strong><span style="font-family:'Courier New'; font-size:10.0pt; color:#7F0055; ">class</span></strong><span style="font-family:'Courier New'; font-size:10.0pt; color:black; "> Graph {</span><span style="font-family:'Courier New'; font-size:10.0pt; "> </span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; color:black; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><strong><span style="font-family:'Courier New'; font-size:10.0pt; color:#7F0055; ">private</span></strong><span style="font-family:'Courier New'; font-size:10.0pt; color:black; "> </span><strong><span style="font-family:'Courier New'; font-size:10.0pt; color:#7F0055; ">boolean</span></strong><span style="font-family:'Courier New'; font-size:10.0pt; color:black; "> adjacencyMatrix[][];</span><span style="font-family:'Courier New'; font-size:10.0pt; "> </span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; color:black; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><strong><span style="font-family:'Courier New'; font-size:10.0pt; color:#7F0055; ">private</span></strong><span style="font-family:'Courier New'; font-size:10.0pt; color:black; "> </span><strong><span style="font-family:'Courier New'; font-size:10.0pt; color:#7F0055; ">int</span></strong><span style="font-family:'Courier New'; font-size:10.0pt; color:black; "> vertexCount;</span><span style="font-family:'Courier New'; font-size:10.0pt; "> </span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; ">&nbsp;</span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; color:black; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><strong><span style="font-family:'Courier New'; font-size:10.0pt; color:#7F0055; ">public</span></strong><span style="font-family:'Courier New'; font-size:10.0pt; color:black; "> Graph(</span><strong><span style="font-family:'Courier New'; font-size:10.0pt; color:#7F0055; ">int</span></strong><span style="font-family:'Courier New'; font-size:10.0pt; color:black; "> vertexCount) {</span><span style="font-family:'Courier New'; font-size:10.0pt; "> </span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; color:black; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><strong><span style="font-family:'Courier New'; font-size:10.0pt; color:#7F0055; ">this</span></strong><span style="font-family:'Courier New'; font-size:10.0pt; color:black; ">.vertexCount =  vertexCount;</span><span style="font-family:'Courier New'; font-size:10.0pt; "> </span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; color:black; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; adjacencyMatrix = </span><strong><span style="font-family:'Courier New'; font-size:10.0pt; color:#7F0055; ">new</span></strong><span style="font-family:'Courier New'; font-size:10.0pt; color:black; "> </span><strong><span style="font-family:'Courier New'; font-size:10.0pt; color:#7F0055; ">boolean</span></strong><span style="font-family:'Courier New'; font-size:10.0pt; color:black; ">[vertexCount][vertexCount];</span><span style="font-family:'Courier New'; font-size:10.0pt; "> </span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; color:black; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span><span style="font-family:'Courier New'; font-size:10.0pt; "> </span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; ">&nbsp;</span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; color:black; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><strong><span style="font-family:'Courier New'; font-size:10.0pt; color:#7F0055; ">public</span></strong><span style="font-family:'Courier New'; font-size:10.0pt; color:black; "> </span><strong><span style="font-family:'Courier New'; font-size:10.0pt; color:#7F0055; ">void</span></strong><span style="font-family:'Courier New'; font-size:10.0pt; color:black; "> addEdge(</span><strong><span style="font-family:'Courier New'; font-size:10.0pt; color:#7F0055; ">int</span></strong><span style="font-family:'Courier New'; font-size:10.0pt; color:black; "> i, </span><strong><span style="font-family:'Courier New'; font-size:10.0pt; color:#7F0055; ">int</span></strong><span style="font-family:'Courier New'; font-size:10.0pt; color:black; "> j) {</span><span style="font-family:'Courier New'; font-size:10.0pt; "> </span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; color:black; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><strong><span style="font-family:'Courier New'; font-size:10.0pt; color:#7F0055; ">if</span></strong><span style="font-family:'Courier New'; font-size:10.0pt; color:black; "> (i &gt;= 0  &amp;&amp; i &lt; vertexCount &amp;&amp; j &gt; 0 &amp;&amp; j &lt;  vertexCount) {</span><span style="font-family:'Courier New'; font-size:10.0pt; "> </span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; color:black; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; adjacencyMatrix[i][j] = </span><strong><span style="font-family:'Courier New'; font-size:10.0pt; color:#7F0055; ">true</span></strong><span style="font-family:'Courier New'; font-size:10.0pt; color:black; ">;</span><span style="font-family:'Courier New'; font-size:10.0pt; "> </span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; color:black; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; adjacencyMatrix[j][i] = </span><strong><span style="font-family:'Courier New'; font-size:10.0pt; color:#7F0055; ">true</span></strong><span style="font-family:'Courier New'; font-size:10.0pt; color:black; ">;</span><span style="font-family:'Courier New'; font-size:10.0pt; "> </span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; color:black; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span><span style="font-family:'Courier New'; font-size:10.0pt; "> </span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; color:black; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span><span style="font-family:'Courier New'; font-size:10.0pt; "> </span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; ">&nbsp;</span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; color:black; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><strong><span style="font-family:'Courier New'; font-size:10.0pt; color:#7F0055; ">public</span></strong><span style="font-family:'Courier New'; font-size:10.0pt; color:black; "> </span><strong><span style="font-family:'Courier New'; font-size:10.0pt; color:#7F0055; ">void</span></strong><span style="font-family:'Courier New'; font-size:10.0pt; color:black; "> removeEdge(</span><strong><span style="font-family:'Courier New'; font-size:10.0pt; color:#7F0055; ">int</span></strong><span style="font-family:'Courier New'; font-size:10.0pt; color:black; "> i, </span><strong><span style="font-family:'Courier New'; font-size:10.0pt; color:#7F0055; ">int</span></strong><span style="font-family:'Courier New'; font-size:10.0pt; color:black; "> j) {</span><span style="font-family:'Courier New'; font-size:10.0pt; "> </span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; color:black; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><strong><span style="font-family:'Courier New'; font-size:10.0pt; color:#7F0055; ">if</span></strong><span style="font-family:'Courier New'; font-size:10.0pt; color:black; "> (i &gt;= 0  &amp;&amp; i &lt; vertexCount &amp;&amp; j &gt; 0 &amp;&amp; j &lt;  vertexCount) {</span><span style="font-family:'Courier New'; font-size:10.0pt; "> </span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; color:black; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; adjacencyMatrix[i][j] = </span><strong><span style="font-family:'Courier New'; font-size:10.0pt; color:#7F0055; ">false</span></strong><span style="font-family:'Courier New'; font-size:10.0pt; color:black; ">;</span><span style="font-family:'Courier New'; font-size:10.0pt; "> </span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; color:black; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; adjacencyMatrix[j][i] = </span><strong><span style="font-family:'Courier New'; font-size:10.0pt; color:#7F0055; ">false</span></strong><span style="font-family:'Courier New'; font-size:10.0pt; color:black; ">;</span><span style="font-family:'Courier New'; font-size:10.0pt; "> </span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; color:black; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span><span style="font-family:'Courier New'; font-size:10.0pt; "> </span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; color:black; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span><span style="font-family:'Courier New'; font-size:10.0pt; "> </span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; ">&nbsp;</span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; color:black; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><strong><span style="font-family:'Courier New'; font-size:10.0pt; color:#7F0055; ">public</span></strong><span style="font-family:'Courier New'; font-size:10.0pt; color:black; "> </span><strong><span style="font-family:'Courier New'; font-size:10.0pt; color:#7F0055; ">boolean</span></strong><span style="font-family:'Courier New'; font-size:10.0pt; color:black; "> isEdge(</span><strong><span style="font-family:'Courier New'; font-size:10.0pt; color:#7F0055; ">int</span></strong><span style="font-family:'Courier New'; font-size:10.0pt; color:black; "> i, </span><strong><span style="font-family:'Courier New'; font-size:10.0pt; color:#7F0055; ">int</span></strong><span style="font-family:'Courier New'; font-size:10.0pt; color:black; "> j) {</span><span style="font-family:'Courier New'; font-size:10.0pt; "> </span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; color:black; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><strong><span style="font-family:'Courier New'; font-size:10.0pt; color:#7F0055; ">if</span></strong><span style="font-family:'Courier New'; font-size:10.0pt; color:black; "> (i &gt;= 0  &amp;&amp; i &lt; vertexCount &amp;&amp; j &gt; 0 &amp;&amp; j &lt;  vertexCount)</span><span style="font-family:'Courier New'; font-size:10.0pt; "> </span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; color:black; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><strong><span style="font-family:'Courier New'; font-size:10.0pt; color:#7F0055; ">return</span></strong><span style="font-family:'Courier New'; font-size:10.0pt; color:black; "> adjacencyMatrix[i][j];</span><span style="font-family:'Courier New'; font-size:10.0pt; "> </span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; color:black; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><strong><span style="font-family:'Courier New'; font-size:10.0pt; color:#7F0055; ">else</span></strong><span style="font-family:'Courier New'; font-size:10.0pt; "> </span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; color:black; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><strong><span style="font-family:'Courier New'; font-size:10.0pt; color:#7F0055; ">return</span></strong><span style="font-family:'Courier New'; font-size:10.0pt; color:black; "> </span><strong><span style="font-family:'Courier New'; font-size:10.0pt; color:#7F0055; ">false</span></strong><span style="font-family:'Courier New'; font-size:10.0pt; color:black; ">;</span><span style="font-family:'Courier New'; font-size:10.0pt; "> </span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; color:black; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span><span style="font-family:'Courier New'; font-size:10.0pt; "> </span></p>
<p class="MsoNormal"><span style="font-family:'Courier New'; font-size:10.0pt; color:black; ">}</span></p>
<h3>C++</h3>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; color:blue; ">class</span><span style="font-family:'Courier New'; font-size:10.0pt; "> <span style="color:#010001; ">Graph</span> {</span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; color:blue; ">private</span><span style="font-family:'Courier New'; font-size:10.0pt; ">:</span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:blue; ">bool</span>** <span style="color:#010001; ">adjacencyMatrix</span>;</span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:blue; ">int</span> <span style="color:#010001; ">vertexCount</span>;</span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; color:blue; ">public</span><span style="font-family:'Courier New'; font-size:10.0pt; ">:</span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:#010001; ">Graph</span>(<span style="color:blue; ">int</span> <span style="color:#010001; ">vertexCount</span>) {</span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:blue; ">this</span>-&gt;<span style="color:#010001; ">vertexCount</span> = <span style="color:#010001; ">vertexCount</span>;</span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:#010001; ">adjacencyMatrix</span> = <span style="color:blue; ">new</span> <span style="color:blue; ">bool</span>*[<span style="color:#010001; ">vertexCount</span>];</span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:blue; ">for</span> (<span style="color:blue; ">int</span> <span style="color:#010001; ">i</span> = 0; <span style="color:#010001; ">i</span> &lt; <span style="color:#010001; ">vertexCount</span>; <span style="color:#010001; ">i</span>++)  {</span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:#010001; ">adjacencyMatrix</span>[<span style="color:#010001; ">i</span>]  = <span style="color:blue; ">new</span> <span style="color:blue; ">bool</span>[<span style="color:#010001; ">vertexCount</span>];</span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:blue; ">for</span> (<span style="color:blue; ">int</span> <span style="color:#010001; ">j</span> = 0; <span style="color:#010001; ">j</span> &lt; <span style="color:#010001; ">vertexCount</span>; <span style="color:#010001; ">j</span>++)</span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 <span style="color:#010001; ">adjacencyMatrix</span>[<span style="color:#010001; ">i</span>][<span style="color:#010001; ">j</span>] = <span style="color:blue; ">false</span>;</span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; ">&nbsp;</span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:blue; ">void</span> <span style="color:#010001; ">addEdge</span>(<span style="color:blue; ">int</span> <span style="color:#010001; ">i</span>, <span style="color:blue; ">int</span> <span style="color:#010001; ">j</span>) {</span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:blue; ">if</span> (<span style="color:#010001; ">i</span> &gt;= 0  &amp;&amp; <span style="color:#010001; ">i</span> &lt; <span style="color:#010001; ">vertexCount</span> &amp;&amp; <span style="color:#010001; ">j</span> &gt; 0 &amp;&amp; <span style="color:#010001; ">j</span> &lt; <span style="color:#010001; ">vertexCount</span>)  {</span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:#010001; ">adjacencyMatrix</span>[<span style="color:#010001; ">i</span>][<span style="color:#010001; ">j</span>] = <span style="color:blue; ">true</span>;</span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:#010001; ">adjacencyMatrix</span>[<span style="color:#010001; ">j</span>][<span style="color:#010001; ">i</span>] = <span style="color:blue; ">true</span>;</span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; ">&nbsp;</span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:blue; ">void</span> <span style="color:#010001; ">removeEdge</span>(<span style="color:blue; ">int</span> <span style="color:#010001; ">i</span>, <span style="color:blue; ">int</span> <span style="color:#010001; ">j</span>) {</span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:blue; ">if</span> (<span style="color:#010001; ">i</span> &gt;= 0  &amp;&amp; <span style="color:#010001; ">i</span> &lt; <span style="color:#010001; ">vertexCount</span> &amp;&amp; <span style="color:#010001; ">j</span> &gt; 0 &amp;&amp; <span style="color:#010001; ">j</span> &lt; <span style="color:#010001; ">vertexCount</span>)  {</span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:#010001; ">adjacencyMatrix</span>[<span style="color:#010001; ">i</span>][<span style="color:#010001; ">j</span>] = <span style="color:blue; ">false</span>;</span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:#010001; ">adjacencyMatrix</span>[<span style="color:#010001; ">j</span>][<span style="color:#010001; ">i</span>] = <span style="color:blue; ">false</span>;</span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; ">&nbsp;</span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:blue; ">bool</span> <span style="color:#010001; ">isEdge</span>(<span style="color:blue; ">int</span> <span style="color:#010001; ">i</span>, <span style="color:blue; ">int</span> <span style="color:#010001; ">j</span>) {</span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:blue; ">if</span> (<span style="color:#010001; ">i</span> &gt;= 0  &amp;&amp; <span style="color:#010001; ">i</span> &lt; <span style="color:#010001; ">vertexCount</span> &amp;&amp; <span style="color:#010001; ">j</span> &gt; 0 &amp;&amp; <span style="color:#010001; ">j</span> &lt; <span style="color:#010001; ">vertexCount</span>)</span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:blue; ">return</span> <span style="color:#010001; ">adjacencyMatrix</span>[<span style="color:#010001; ">i</span>][<span style="color:#010001; ">j</span>];</span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:blue; ">else</span></span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:blue; ">return</span> <span style="color:blue; ">false</span>;</span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; ">&nbsp;</span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ~<span style="color:#010001; ">Graph</span>() {</span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:blue; ">for</span> (<span style="color:blue; ">int</span> <span style="color:#010001; ">i</span> = 0; <span style="color:#010001; ">i</span> &lt; <span style="color:#010001; ">vertexCount</span>; <span style="color:#010001; ">i</span>++)</span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:blue; ">delete</span>[] <span style="color:#010001; ">adjacencyMatrix</span>[<span style="color:#010001; ">i</span>];</span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:blue; ">delete</span>[] <span style="color:#010001; ">adjacencyMatrix</span>;</span></p>
<p class="MsoNormal" style="text-autospace:none;"><span style="font-family:'Courier New'; font-size:10.0pt; ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-family:'Courier New'; font-size:10.0pt; ">}</span></p>
<p class="MsoNormal"><span style="font-family:'Courier New'; font-size:10.0pt; ">};</span></p>
<h2>Recommended books</h2>
<ol>
<li><a href="https://www.algolist.net/Books/0262531968">Cormen, Leiserson,
Rivest. <strong>Introduction to algorithms.</strong></a> <strong>(Theory)</strong></li>
<li><a href="https://www.algolist.net/Books/0201000237">Aho, Ullman, Hopcroft. <strong>Data Structures and Algorithms.</strong></a> <strong>(Theory)</strong></li>
<!--li><a href="http://www.amazon.com/gp/product/158488505X?ie=UTF8&tag=simplprogrtut-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=158488505X">Gross, Yellen. <strong>Graph Theory and Its Applications.</strong></a> <strong>(Theory)</strong></li!-->
  <li><a href="https://www.algolist.net/Books/0672324539">Robert Lafore. <strong>Data Structures and Algorithms in Java.</strong></a><strong> (Practice)</strong></li>
  <li><a href="https://www.algolist.net/Books/020161250X">Mark Allen Weiss. <strong>Data Structures and Problem Solving Using C++.</strong></a><strong> (Practice)</strong></li>
</ol><iframe src="http://www.facebook.com/plugins/like.php?href=http://www.algolist.net/Data_structures/Graph/Internal_representation&amp;layout=standard&amp;show_faces=true&amp;width=739&amp;action=like&amp;font&amp;colorscheme=light&amp;height=30" scrolling="no" style="border:none; overflow:hidden; width:739px; height:30px;" allowtransparency="true" frameborder="0"></iframe>
     
     <div style="margin-bottom:15px;">
     
     <h2>Contribute to AlgoList</h2>
     
     <p>Liked this tutorial? Please, consider making a donation. 
Contribute to help us keep sharing free knowledge and write new 
tutorials.</p>
     
     <span style="text-align: center; display:inline-block;">
     
     <form action="https://www.paypal.com/cgi-bin/webscr" method="post">
<input type="hidden" name="cmd" value="_s-xclick">
<input type="hidden" name="hosted_button_id" value="WJ7YPA5XHR5N8">
<input type="image" onclick="sendDonate()" src="UNDIRECTED%20GRAPHS%20REPRESENTATION%20GRAPH%20THEORY%20(Java,%20C++)%20Algorithms%20and%20Data%20Structures_files/btn_donate_LG.webp" name="submit" alt="PayPal - The safer, easier way to pay online!" border="0">
<img alt="" src="UNDIRECTED%20GRAPHS%20REPRESENTATION%20GRAPH%20THEORY%20(Java,%20C++)%20Algorithms%20and%20Data%20Structures_files/pixel.gif" width="1" height="1" border="0"><br>
<img alt="" style="margin-top:5px;" src="UNDIRECTED%20GRAPHS%20REPRESENTATION%20GRAPH%20THEORY%20(Java,%20C++)%20Algorithms%20and%20Data%20Structures_files/pp.png" border="0">
</form>
	</span>
	<p>Every dollar helps!</p>
</div>
     
             <div style="padding-top: 10px;"><center><script src="http://tag.contextweb.com/TagPublish/getjs.aspx?action=VIEWAD&amp;cwrun=200&amp;cwadformat=728X90&amp;cwpid=510902&amp;cwwidth=728&amp;cwheight=90&amp;cwpnet=1&amp;cwtagid=43244"></script></center></div>                 
        
<!--LX!-->  
        
           
  <form onsubmit="return false;" style="text-align:left">
   
   <!--?php
$ipi = getenv("REMOTE_ADDR");
$httprefi = getenv ("HTTP_REFERER");
$httpagenti = getenv ("HTTP_USER_AGENT");
?-->
   
   <input type="hidden" name="ip" value="&lt;?php echo $ipi ?&gt;">
<input type="hidden" name="httpref" value="&lt;?php echo $httprefi ?&gt;">
<input type="hidden" name="httpagent" value="&lt;?php echo $httpagenti ?&gt;">
   
   <table border="0">
  <tbody><tr>
    <td colspan="2">
    <h2 class="real_h3">Leave a reply</h2>
	<div id="showx">
</div>

    </td>
  </tr>
  <tr>
    <td width="150px" valign="top">Your name (optional):</td>
    <td><input type="text" name="visitor" id="visitor" size="35"></td>
  </tr>
  <tr>
    <td width="150px" valign="top">Your e-mail (optional):</td>
    <td><input type="text" name="visitormail" id="visitormail" size="35"></td>
  </tr>
  <tr>
    <td width="150px" valign="top">Message: </td>
    <td><textarea type="text" name="message" id="message" rows="10" cols="60"></textarea></td>
  </tr>
  <tr>
    <td width="150px" valign="top">&nbsp;</td>
    <td><input type="submit" value="Send" onclick="sendRequest()">
</td>
  </tr>
</tbody></table>
  </form>
      
        
           
            
    </div></div> </div></div></td></tr></tbody></table>        
            <!--Google analytics-->
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script><script src="UNDIRECTED%20GRAPHS%20REPRESENTATION%20GRAPH%20THEORY%20(Java,%20C++)%20Algorithms%20and%20Data%20Structures_files/ga.js" type="text/javascript"></script>
<script type="text/javascript">
try {
var pageTracker = _gat._getTracker("UA-9311725-1");
pageTracker._trackPageview();
} catch(err) {}</script>
            <!--/Google analytics-->
  
</body></html>